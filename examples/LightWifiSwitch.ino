/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * This sample sketch shows how to setup ESP8266 with 1 OUTPUT virtual pin.
 * To use it you need to register and configure de device and virtual pin at https://thinkingthing.space/mysec
 */

#include "Arduino.h"
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <MysecSwitch.h>

// Replace these keys with the ones you receive after registration at https://thinkingthing.space/mysec
const char passkey1[] = "ReplaceReplaceReplaceReplaceReplaceReplace1=";
const char passkey2[] = "ReplaceReplaceReplaceReplaceReplaceReplace1=";
// Replace id with the device id from https://thinkingthing.space/mysec
const uint64_t id = 1;
// This is the UDP port used to pair with the Android MysecSwitch App for local communication. The same port has to be configured at the Android Mysecswitch App.
const int port = 8876;
// Local Wifi Router config
const char wifiSSID[] = "ssid";
const char wifiPasswd[] = "password";

ESP8266WiFiMulti wifiMulti;
// URL of the Mysec Website (you don't need to change this)
const char url[] = "http://thinkingthing.space/mysec";

// MysecSwitch instance
MysecSwitch dev;

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  wifiMulti.addAP(wifiSSID, wifiPasswd);

  Serial.println("\nConnecting Wifi...");
  while (wifiMulti.run() != WL_CONNECTED && millis() < 60000) { // 60 segundos para conectar
    delay(500);
    Serial.print(".");
  }
  if (wifiMulti.run() == WL_CONNECTED) {
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    // Setup MysecSwitch library
    // url      -> URL for the Mysec Website, it has to be "http://thinkingthing.space/mysec"
    // id       -> ID for the device given by Mysec Website
    // port     -> UDP port for local LAN connection with a viewer
    // true     -> set to true if you want this device to respond to Mysec Alarm events
    // passkey1 -> User passkey generated by Mysec Website (you may already received it by e-mail)
    // passkey2 -> Initial device passkey generated by Mysec Website, this passkey will be replaced at device synchronization.
    dev.init(url, id, port, true, passkey1, passkey2);

    // In this example we have 1 OUTPUT virtual pin, it is connected to GPIO-2.
    // D4 is the "NodeMCU/Wemos D1 mini" label on the printed circuit and is equivalent to GPIO-2 (D4 constant value is 2).
    // On Wemos D1 mini, this pin is connected to a built in LED. Note that a LOW signal on this pin turns the LED ON.
    pinMode(D4, OUTPUT); // can be replaced by pinMode(2, OUTPUT);

    // Setup pin number 1. Parameter details:
    // 1                    -> indentify this pin as pin number 1 (the same number has to be configured at Mysec Website)
    // true /* output */    -> this is an OUTPUT pin
    // true /* digital */   -> this pin only accepts true/false (0/1) values.
    // true /* automatic */ -> commands received from viewer or Mysec Website will be automatically applied to physical GPIO-2.
    // D4                   -> Physical pin, needed only with automatic pins.
    dev.setupPin(1, true /*output*/, true /*digital*/, true/*automatic*/,
        D4/*physical pin*/);
  } else {
    // can't connect to wifi router
    // retry
    Serial.println("reset");
    ESP.restart();
  }
}
void loop() {
	// do the magic
	dev.loop();
}
